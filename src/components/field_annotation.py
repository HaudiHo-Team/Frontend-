import streamlit as st
import streamlit.components.v1 as components
import json

def render_field_annotation(file_data, filename, coordinates=None):
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª–µ–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    
    st.markdown("""
    <style>
    .annotation-container {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        border: none;
        padding: 20px;
        margin: 20px 0;
    }
    
    .annotation-title {
        font-size: 20px;
        font-weight: 600;
        color: #FFFFFF;
        margin-bottom: 16px;
        text-align: center;
    }
    
    .document-canvas {
        width: 100%;
        height: 600px;
        border: none;
        border-radius: 12px;
        background: #FFFFFF;
        position: relative;
        overflow: hidden;
    }
    
    .field-list {
        margin-top: 16px;
        padding: 12px;
        background: rgba(149, 136, 212, 0.1);
        border-radius: 8px;
        border: none;
    }
    
    .field-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        margin: 4px 0;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .field-item:hover {
        background: rgba(149, 136, 212, 0.2);
    }
    
    .field-checkbox {
        width: 16px;
        height: 16px;
    }
    
    .field-label {
        font-size: 14px;
        color: #D8D8D8;
        flex: 1;
    }
    
    .field-coordinates {
        font-size: 12px;
        color: #9588D4;
        font-family: monospace;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
    fields = [
        {"id": "contract_number", "label": "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "icon": "üìÑ"},
        {"id": "contract_start_date", "label": "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è", "icon": "üìÖ"},
        {"id": "contract_end_date", "label": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "icon": "üìÖ"},
        {"id": "counterparty", "label": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "icon": "üè¢"},
        {"id": "country", "label": "–°—Ç—Ä–∞–Ω–∞", "icon": "üåç"},
        {"id": "contract_amount", "label": "–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "icon": "üí∞"},
        {"id": "contract_currency", "label": "–í–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "icon": "üí±"},
        {"id": "payment_currency", "label": "–í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞", "icon": "üí≥"}
    ]
    
    # HTML –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    annotation_html = f"""
    <div class="annotation-container">
        <div class="annotation-title">üìù –û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ</div>
        
        <canvas id="annotationCanvas" class="document-canvas" width="800" height="600"></canvas>
        
        <div class="field-list">
            <h4 style="color: #9588D4; margin-bottom: 12px;">–ü–æ–ª—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:</h4>
            {''.join([f'''
            <div class="field-item" data-field="{field['id']}">
                <input type="checkbox" class="field-checkbox" id="field_{field['id']}">
                <span class="field-label">{field['icon']} {field['label']}</span>
                <span class="field-coordinates" id="coords_{field['id']}">–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ</span>
            </div>
            ''' for field in fields])}
        </div>
    </div>
    
    <script>
    // –ü–æ–ª—É—á–∞–µ–º canvas –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const canvas = document.getElementById('annotationCanvas');
    const ctx = canvas.getContext('2d');
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –±—ç–∫–µ–Ω–¥–∞
    const coordinates = {json.dumps(coordinates or [])};
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const markedFields = {{}};
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    function drawDocument() {{
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        if (coordinates && coordinates.length > 0) {{
            ctx.strokeStyle = '#9588D4';
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            
            coordinates.forEach((line, index) => {{
                if (line && line.length >= 2) {{
                    ctx.beginPath();
                    ctx.moveTo(line[0].x, line[0].y);
                    
                    for (let i = 1; i < line.length; i++) {{
                        ctx.lineTo(line[i].x, line[i].y);
                    }}
                    
                    ctx.stroke();
                }}
            }});
        }}
        
        // –†–∏—Å—É–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        Object.values(markedFields).forEach(field => {{
            if (field.coordinates) {{
                ctx.fillStyle = 'rgba(149, 136, 212, 0.3)';
                ctx.fillRect(field.coordinates.x - 5, field.coordinates.y - 5, 10, 10);
                
                ctx.fillStyle = '#9588D4';
                ctx.font = '12px Arial';
                ctx.fillText(field.label, field.coordinates.x + 15, field.coordinates.y + 5);
            }}
        }});
    }}
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas
    canvas.addEventListener('click', function(e) {{
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
        const activeField = document.querySelector('.field-item.active');
        if (activeField) {{
            const fieldId = activeField.dataset.field;
            const fieldLabel = activeField.querySelector('.field-label').textContent;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            markedFields[fieldId] = {{
                label: fieldLabel,
                coordinates: {{x: x, y: y}}
            }};
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            activeField.querySelector('.field-coordinates').textContent = `(${{x}}, ${{y}})`;
            activeField.classList.remove('active');
            
            drawDocument();
        }}
    }});
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—è–º
    document.querySelectorAll('.field-item').forEach(item => {{
        item.addEventListener('click', function(e) {{
            if (e.target.type !== 'checkbox') {{
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                document.querySelectorAll('.field-item').forEach(i => i.classList.remove('active'));
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
                this.classList.add('active');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                canvas.style.cursor = 'crosshair';
            }}
        }});
    }});
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
    document.querySelectorAll('.field-checkbox').forEach(checkbox => {{
        checkbox.addEventListener('change', function() {{
            const fieldId = this.id.replace('field_', '');
            const fieldItem = this.closest('.field-item');
            
            if (this.checked) {{
                fieldItem.classList.add('active');
                canvas.style.cursor = 'crosshair';
            }} else {{
                fieldItem.classList.remove('active');
                canvas.style.cursor = 'default';
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                delete markedFields[fieldId];
                fieldItem.querySelector('.field-coordinates').textContent = '–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ';
                drawDocument();
            }}
        }});
    }});
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    drawDocument();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
    function resizeCanvas() {{
        const container = canvas.parentElement;
        canvas.width = container.clientWidth - 4;
        canvas.height = 600;
        drawDocument();
    }}
    
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    </script>
    """
    
    components.html(annotation_html, height=800)

def render_simple_field_list():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏"""
    
    st.markdown("### üìù –ü–æ–ª—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏")
    
    fields = [
        ("üìÑ", "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "contract_number"),
        ("üìÖ", "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è", "contract_start_date"),
        ("üìÖ", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "contract_end_date"),
        ("üè¢", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "counterparty"),
        ("üåç", "–°—Ç—Ä–∞–Ω–∞", "country"),
        ("üí∞", "–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "contract_amount"),
        ("üí±", "–í–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "contract_currency"),
        ("üí≥", "–í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞", "payment_currency")
    ]
    
    for icon, label, field_id in fields:
        col1, col2 = st.columns([1, 4])
        with col1:
            checked = st.checkbox("", key=f"field_{field_id}")
        with col2:
            st.write(f"{icon} {label}")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏", type="primary"):
        st.success("–û—Ç–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
