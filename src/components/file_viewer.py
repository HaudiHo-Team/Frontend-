import streamlit as st
import streamlit.components.v1 as components
import json
import base64
import io

def render_file_viewer(file_data=None, coordinates=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    
    if not file_data:
        return
    
    st.markdown("""
    <style>
    .file-viewer-container {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 20px;
        margin: 20px 0;
        position: relative;
        overflow: hidden;
    }
    
    .file-viewer-title {
        font-size: 20px;
        font-weight: 600;
        color: #FFFFFF;
        margin-bottom: 16px;
        text-align: center;
    }
    
    .file-canvas {
        width: 100%;
        height: 600px;
        border: 2px solid rgba(149, 136, 212, 0.3);
        border-radius: 12px;
        background: #FFFFFF;
        position: relative;
        overflow: hidden;
    }
    
    .coordinates-info {
        margin-top: 16px;
        padding: 12px;
        background: rgba(149, 136, 212, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(149, 136, 212, 0.2);
    }
    
    .coordinates-title {
        font-size: 14px;
        font-weight: 600;
        color: #9588D4;
        margin-bottom: 8px;
    }
    
    .coordinates-list {
        font-size: 12px;
        color: #D8D8D8;
        font-family: monospace;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å canvas
    file_viewer_html = f"""
    <div class="file-viewer-container">
        <div class="file-viewer-title">üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞</div>
        <canvas id="fileCanvas" class="file-canvas" width="800" height="600"></canvas>
        <div class="coordinates-info">
            <div class="coordinates-title">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–Ω–∏–π:</div>
            <div class="coordinates-list" id="coordinatesList">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
    </div>
    
    <script>
    // –ü–æ–ª—É—á–∞–µ–º canvas –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const canvas = document.getElementById('fileCanvas');
    const ctx = canvas.getContext('2d');
    const coordinatesList = document.getElementById('coordinatesList');
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –±—ç–∫–µ–Ω–¥–∞
    const coordinates = {json.dumps(coordinates or [])};
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π
    function drawLines() {{
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–∏–Ω–∏–π
        ctx.strokeStyle = '#9588D4';
        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        
        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        coordinates.forEach((line, index) => {{
            if (line && line.length >= 2) {{
                ctx.beginPath();
                ctx.moveTo(line[0].x, line[0].y);
                
                for (let i = 1; i < line.length; i++) {{
                    ctx.lineTo(line[i].x, line[i].y);
                }}
                
                ctx.stroke();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –ª–∏–Ω–∏–∏
                if (line[0]) {{
                    ctx.fillStyle = '#9588D4';
                    ctx.font = '12px Arial';
                    ctx.fillText((index + 1).toString(), line[0].x + 5, line[0].y - 5);
                }}
            }}
        }});
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        updateCoordinatesInfo();
    }}
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    function updateCoordinatesInfo() {{
        let info = '';
        coordinates.forEach((line, index) => {{
            if (line && line.length > 0) {{
                info += `–õ–∏–Ω–∏—è ${{index + 1}}: `;
                line.forEach((point, pointIndex) => {{
                    info += `(${{point.x}}, ${{point.y}})`;
                    if (pointIndex < line.length - 1) info += ' ‚Üí ';
                }});
                info += '<br>';
            }}
        }});
        
        if (info === '') {{
            info = '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        }}
        
        coordinatesList.innerHTML = info;
    }}
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    function loadFileImage() {{
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        // const img = new Image();
        // img.onload = function() {{
        //     ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        //     drawLines();
        // }};
        // img.src = 'path/to/file/image';
        
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏–∏
        drawLines();
    }}
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadFileImage();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas
    function resizeCanvas() {{
        const container = canvas.parentElement;
        canvas.width = container.clientWidth - 4; // —É—á–∏—Ç—ã–≤–∞–µ–º border
        canvas.height = 600;
        drawLines();
    }}
    
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    </script>
    """
    
    components.html(file_viewer_html, height=700)

def render_coordinates_table(coordinates=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    
    if not coordinates:
        st.info("–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.markdown("### üìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    import pandas as pd
    
    data = []
    for i, line in enumerate(coordinates):
        if line and len(line) > 0:
            for j, point in enumerate(line):
                data.append({
                    '–õ–∏–Ω–∏—è': i + 1,
                    '–¢–æ—á–∫–∞': j + 1,
                    'X': point.get('x', 0),
                    'Y': point.get('y', 0)
                })
    
    if data:
        df = pd.DataFrame(data)
        st.dataframe(df, use_container_width=True)
    else:
        st.warning("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def render_pdf_viewer(file_data, filename):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç PDF —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è"""
    
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º PDF –≤ base64 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pdf_base64 = base64.b64encode(file_data).decode('utf-8')
        
        # HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF
        pdf_html = f"""
        <div style="width: 100%; height: 600px; border: 2px solid rgba(149, 136, 212, 0.3); border-radius: 12px; overflow: hidden;">
            <iframe 
                src="data:application/pdf;base64,{pdf_base64}" 
                width="100%" 
                height="100%" 
                style="border: none;"
                type="application/pdf">
            </iframe>
        </div>
        """
        
        st.markdown("### üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        components.html(pdf_html, height=600)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ PDF: {str(e)}")
        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        st.info(f"–§–∞–π–ª: {filename} (PDF –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω)")

def render_simple_file_display(filename, coordinates=None, file_data=None):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ª–∏–Ω–∏—è–º–∏"""
    
    st.markdown("""
    <style>
    .simple-file-display {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 20px;
        margin: 16px 0;
    }
    
    .file-name {
        font-size: 18px;
        font-weight: 600;
        color: #FFFFFF;
        margin-bottom: 16px;
        text-align: center;
    }
    
    .coordinates-summary {
        background: rgba(149, 136, 212, 0.1);
        border-radius: 8px;
        padding: 12px;
        margin-top: 12px;
    }
    
    .summary-title {
        font-size: 14px;
        font-weight: 600;
        color: #9588D4;
        margin-bottom: 8px;
    }
    
    .summary-text {
        font-size: 12px;
        color: #D8D8D8;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_lines = len(coordinates) if coordinates else 0
    total_points = sum(len(line) for line in coordinates) if coordinates else 0
    
    st.markdown(f"""
    <div class="simple-file-display">
        <div class="file-name">üìÑ {filename}</div>
        <div class="coordinates-summary">
            <div class="summary-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</div>
            <div class="summary-text">
                –õ–∏–Ω–∏–π: {total_lines}<br>
                –¢–æ—á–µ–∫: {total_points}
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –∏ —ç—Ç–æ PDF, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if file_data and filename.lower().endswith('.pdf'):
        render_pdf_viewer(file_data, filename)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≤–∏–¥–µ JSON
    if coordinates:
        with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"):
            st.json(coordinates)
