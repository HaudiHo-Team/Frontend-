"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
"""

import streamlit as st
from src.api.api import get_api, upload_file_to_api, quick_extract_text, quick_search, login_user, logout_user

def render_api_example():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    st.title("üîå –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å API")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api = get_api()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    auth_status = api.get_auth_status()
    
    if not auth_status["authenticated"]:
        st.warning("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API")
        
        # –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        with st.form("login_form"):
            st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            email = st.text_input("Email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.form_submit_button("–í–æ–π—Ç–∏"):
                    if login_user(email, password):
                        st.success("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            with col2:
                if st.form_submit_button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    st.info("–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    else:
        st.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {auth_status.get('user', {}).get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("–í—ã–π—Ç–∏"):
            logout_user()
            st.rerun()
        
        st.divider()
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        tab1, tab2, tab3, tab4 = st.tabs(["üìÅ –§–∞–π–ª—ã", "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üîç –ü–æ–∏—Å–∫", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
        
        with tab1:
            render_files_tab(api)
        
        with tab2:
            render_documents_tab(api)
        
        with tab3:
            render_search_tab(api)
        
        with tab4:
            render_analytics_tab(api)

def render_files_tab(api):
    """–í–∫–ª–∞–¥–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        accept_multiple_files=True,
        type=['pdf', 'doc', 'docx', 'txt']
    )
    
    if uploaded_files:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã"):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
                for uploaded_file in uploaded_files:
                    file_id = upload_file_to_api(uploaded_file)
                    if file_id:
                        st.write(f"‚úÖ {uploaded_file.name} ‚Üí ID: {file_id}")
    
    st.divider()
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    st.subheader("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
        try:
            files = api.get_files()
            if files and "files" in files:
                for file_info in files["files"]:
                    col1, col2, col3 = st.columns([3, 1, 1])
                    
                    with col1:
                        st.write(f"üìÑ {file_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}")
                    
                    with col2:
                        if st.button("–°–∫–∞—á–∞—Ç—å", key=f"download_{file_info.get('id')}"):
                            file_data = api.get_file(file_info.get('id'))
                            if file_data:
                                st.download_button(
                                    "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                                    file_data,
                                    file_name=file_info.get('name'),
                                    key=f"dl_{file_info.get('id')}"
                                )
                    
                    with col3:
                        if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{file_info.get('id')}"):
                            if api.delete_file(file_info.get('id')):
                                st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
            else:
                st.info("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

def render_documents_tab(api):
    """–í–∫–ª–∞–¥–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        files = api.get_files()
        if files and "files" in files:
            file_options = {f"{f['name']} (ID: {f['id']})": f['id'] for f in files["files"]}
            
            if file_options:
                selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", list(file_options.keys()))
                
                if selected_file:
                    file_id = file_options[selected_file]
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç"):
                            with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞..."):
                                text = quick_extract_text(file_id)
                                if text:
                                    st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", text, height=200)
                                else:
                                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                    
                    with col2:
                        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
                            with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
                                analysis = api.analyze_document(file_id)
                                st.json(analysis)
                    
                    with col3:
                        target_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ["pdf", "docx", "txt"])
                        if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            with st.spinner("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è..."):
                                result = api.convert_document(file_id, target_format)
                                st.json(result)
            else:
                st.info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            st.info("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def render_search_tab(api):
    """–í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞"""
    st.subheader("–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    
    if st.button("–ü–æ–∏—Å–∫") and query:
        with st.spinner("–ü–æ–∏—Å–∫..."):
            try:
                results = quick_search(query)
                
                if results:
                    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    
                    for i, result in enumerate(results):
                        with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}: {result.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}"):
                            st.write(f"**–¢–µ–∫—Å—Ç:** {result.get('text', '')}")
                            st.write(f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {result.get('page', 'N/A')}")
                            st.write(f"**–§–∞–π–ª ID:** {result.get('file_id', 'N/A')}")
                else:
                    st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

def render_analytics_tab(api):
    """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", "0", "0")
        
        with col2:
            st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "0", "0")
        
        with col3:
            st.metric("–û—à–∏–±–æ–∫", "0", "0")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."):
                try:
                    upload_stats = api.get_upload_stats()
                    processing_stats = api.get_processing_stats()
                    activity = api.get_user_activity()
                    
                    st.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∏")
                        st.json(upload_stats)
                    
                    with col2:
                        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞")
                        st.json(processing_stats)
                    
                    st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                    st.json(activity)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

def render_api_example_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º API"""
    from src.components import header, sidebar
    
    header.render_page_header()
    
    st.markdown('<div class="main-container">', unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        sidebar.render_sidebar()
    
    with col2:
        render_api_example()
    
    st.markdown('</div>', unsafe_allow_html=True)
